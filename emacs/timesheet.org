#+NAME: timesheet_table
#+begin_src elisp :results table
  (nconc
   (let ((ast (org-element-parse-buffer 'element)))
     (org-element-map ast 'clock
       (lambda (x)
         (let ((val (org-element-property :value x)))
           `(,(car (split-string (org-element-property :raw-value val) "--"))
             ,(calendar-month-name (org-element-property :month-start val) t)
             ,(number-to-string (org-element-property :day-start val))
             ,(concat (number-to-string (org-element-property :hour-start val))
                      ":"
                      (format "%02d" (org-element-property :minute-start val)))
             ,(concat (number-to-string (org-element-property :hour-end val))
                      ":"
                      (format "%02d" (org-element-property :minute-end val)))
             ,(org-element-property :duration x)
             ,@(org-element-map
                   (org-element-property :parent (org-element-property :parent x))
                   'headline
                 (lambda (x)
                   (let ((parent (org-element-property :title (org-element-property :parent x))))
                     (concat
                      (if (null parent)
                          ""
                        (format "[%s] " parent))
                      (org-element-property :title x)))))))))))
#+end_src

#+NAME: timesheet_final
#+BEGIN_SRC python :results value :var tbl=timesheet_table
  from datetime import datetime

  headers = ['*year*', '*month*', '*day*', '*clockin*', '*clockout*', '*duration*', '*title*']
  timeformat = '[%Y-%m-%d %a %H:%M]'

  for row in tbl:
      row[0] = datetime.strptime(row[0], timeformat)
      row.insert(1, row[0].year)

  tbl = sorted(tbl, key=lambda row: row[0])

  return [headers] + [None] + [row[1:] for row in tbl] + [None] + [['', '', '', '', '*total:*', ':=vsum(@2..@-1);T', '']]
#+END_SRC
