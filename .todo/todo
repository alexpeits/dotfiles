#!/usr/bin/env python

from __future__ import print_function

import os
import tempfile
import argparse
from subprocess import call

EDITOR = '/usr/bin/editor'

# HERE = os.path.abspath(os.path.dirname(__file__))
HERE = '/home/alex/.todo'
EXT = '.todo'


def text_from_editor():
    with tempfile.NamedTemporaryFile(suffix=EXT) as tf:
        code = call([EDITOR, tf.name])
        if code:
            raise ValueError('Something went wrong')
        tf.seek(0)
        body_text = tf.read()

    return body_text


def create(title=None):
    text = text_from_editor()
    if title is None:
        title = text[:text.find('\n')].strip().replace(' ', '_')
    if title == '' and text == '':
        return
    title += EXT
    fpath = os.path.join(HERE, title)
    with open(fpath, 'w') as f:
        f.write(text)


def get_files():
    files = os.listdir(HERE)
    files = filter(lambda f: os.path.isfile(os.path.join(HERE, f)), files)
    files = filter(lambda f: f.endswith(EXT), files)
    paths = map(lambda f: os.path.join(HERE, f), files)
    return files, paths


def display_list(files):
    for i, fn in enumerate(files):
        print('[{i}] {fn}'.format(i=i+1, fn=fn.rstrip(EXT).replace('_', ' ')))


def check():
    files, paths = get_files()
    if len(files) == 0:
        print('Nothing to show.')
        return
    print('usage: v[iew], d[elete] <num>, <num> (view), l[ist], q[uit]')
    print()
    display_list(files)
    print()
    try:
        while True:
            cmd = raw_input('> ')
            if cmd == 'q':
                return
            elif cmd == 'l':
                print()
                display_list(files)
                continue
            elif cmd == '':
                continue
            try:
                i = int(cmd)
                act = 'v'
            except ValueError:
                parts = cmd.split()
                act, i = parts[0], int(parts[1])
            if i < 1 or i > len(files):
                print()
                print('Please choose a number from the above')
                continue
            if act == 'v':
                with open(paths[i - 1]) as f:
                    print()
                    print(f.read())
            elif act == 'd':
                os.remove(paths[i - 1])
                files, paths = get_files()
                print()
                display_list(files)
            else:
                print()
                print('Commands are: v[iew], d[elete]')
    except (KeyboardInterrupt, EOFError):
        pass


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    group = parser.add_mutually_exclusive_group()
    group.add_argument('-t', '--title', dest='title', action='store',
                        type=str, required=False, help='Title')
    group.add_argument('-c', '--check', dest='check', action='store_true',
                        default=False)
    group.add_argument('-l', '--list', dest='check', action='store_true',
                        default=False)

    args = parser.parse_args()
    if args.check:
        check()
    else:
        title = args.title
        create(title)
